import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export default async function handler(req, res) {
  try {import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export default async function handler(req, res) {
  try {
    const { prompt } = await req.json();

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "Sen eimport fs from "fs";
import path from "path";
import OpenAI from "openai";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    // JSON dosyasÄ±nÄ± oku
    const filePath = path.join(process.cwd(), "characters.json");
    const characters = JSON.parse(fs.readFileSync(filePath, "utf-8"));

    // Prompt oluÅŸtur
    const characterList = characters
      .map(c => `${c.name} (${c.era}) - ${c.traits}`)
      .join(", ");

    const prompt = `
Sen edebiyat alanÄ±nda uzman bir yazarsÄ±n.
AÅŸaÄŸÄ±daki karakterler arasÄ±nda 2000 kelimelik yaratÄ±cÄ± bir diyalog oluÅŸtur.
Karakterler: ${characterList}
`;

    const client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Sen edebiyat alanÄ±nda uzman bir yazarsÄ±n." },
        { role: "user", content: prompt }
      ],
      max_tokens: 3000,
      temperature: 0.8
    });

    res.status(200).json({ text: completion.choices[0].message.content });
  } catch (error) {
    console.error("ğŸ”´ API HatasÄ±:", error);
    res.status(500).json({ error: "Sunucu hatasÄ±, metin oluÅŸturulamadÄ±." });
  }
}
debi bir anlatÄ±m tarzÄ±na sahip, uzun ve derin diyaloglar yazan bir yapay zekasÄ±n."
        },
        { role: "user", content: prompt }
      ],
      max_tokens: 4000
    });

    res.status(200).json({ text: completion.choices[0].message.content });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.message });
  }
}

    // Frontend'den gelen prompt'u al
    const { prompt } = await req.json();

    // OpenAI API Ã§aÄŸrÄ±sÄ±
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "Sen edebi bir anlatÄ±m tarzÄ±na sahip, uzun ve derin diyaloglar yazan bir yapay zekasÄ±n."
        },
        { role: "user", content: prompt }
      ],
      max_tokens: 4000
    });

    // Sonucu frontend'e gÃ¶nder
    const result = completion.choices[0].message.content;
    res.status(200).json({ text: result });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}
